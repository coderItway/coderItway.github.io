import{_ as p}from"./chunks/ArticleMetadata.f06b230e.js";import{_ as c,i as r,o as l,c as i,g as d,w as h,e as y,j as u,b as t,f as F,a as D}from"./app.f6f466d0.js";const k=JSON.parse('{"title":"移动端适配","description":"","frontmatter":{"title":"移动端适配","author":"Itway","date":"2022/12/28 17:20","categories":["h5移动端知识集"],"tags":["h5移动端"]},"headers":[{"level":2,"title":"视口 viewport","slug":"视口-viewport","link":"#视口-viewport","children":[{"level":3,"title":"布局视口","slug":"布局视口","link":"#布局视口","children":[]},{"level":3,"title":"视觉视口","slug":"视觉视口","link":"#视觉视口","children":[]},{"level":3,"title":"理想视口","slug":"理想视口","link":"#理想视口","children":[]}]},{"level":2,"title":"移动端适配方案","slug":"移动端适配方案","link":"#移动端适配方案","children":[{"level":3,"title":"方案一：百分比设置","slug":"方案一-百分比设置","link":"#方案一-百分比设置","children":[]},{"level":3,"title":"方案二：rem 单位+动态 html 的 font-size","slug":"方案二-rem-单位-动态-html-的-font-size","link":"#方案二-rem-单位-动态-html-的-font-size","children":[]},{"level":3,"title":"方案三：vw 单位","slug":"方案三-vw-单位","link":"#方案三-vw-单位","children":[]},{"level":3,"title":"方案四：flex 弹性布局","slug":"方案四-flex-弹性布局","link":"#方案四-flex-弹性布局","children":[]}]}],"relativePath":"courses/h5/01-移动端/01-移动端适配.md","lastUpdated":1672219781000}'),B={name:"courses/h5/01-移动端/01-移动端适配.md"},m=t("h1",{id:"移动端适配",tabindex:"-1"},[F("移动端适配 "),t("a",{class:"header-anchor",href:"#移动端适配","aria-hidden":"true"},"#")],-1),C=D(`<h2 id="视口-viewport" tabindex="-1">视口 viewport <a class="header-anchor" href="#视口-viewport" aria-hidden="true">#</a></h2><p>在 PC 端，视口指的是浏览器的可视区域，其宽度和浏览器窗口的度保持一致。在 CSS 标准文档中，视口也被称为初始包含块，它是所有 CSS 百分比宽度推算的根源，给 CSS 布局限制了一个最大宽度。</p><p>移动端浏览器通常宽度是 240px~640px，而大多数为 PC 端设计的网站宽度至少为 800px，如果仍以浏览器窗口作为视口的话，网站内容在手机上看起来会非常窄。因此，移动端引入三个概念，使得移动端中的视口与浏览器宽度不再相关联。</p><ul><li>布局视口 Layout Viewport</li><li>视觉视口 Visual Viewport</li><li>理想视口 Ideal Viewpor</li></ul><h3 id="布局视口" tabindex="-1">布局视口 <a class="header-anchor" href="#布局视口" aria-hidden="true">#</a></h3><p>一般移动设备的浏览器都默认设置了一个 <code>&lt;viewport&gt;</code> 元标签，定义一个虚拟的布局视口（Layout Viewport），用于解决早期的页面在手机上显示的问题。iOS 和 Android 基本都将这个视口分辨率设置为 <code>980px</code>，所以 PC 上的网页基本能在手机上呈现，只不过元素看上去很小，一般默认可以手动缩放网页。</p><p><img src="https://tsejx.github.io/css-guidebook/static/layout-viewport.a6b0fadd.jpg" alt="布局视口"></p><p>布局视口的宽度 / 高度可以通过以下获取。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki vp-code-dark"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">layoutViewport</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">document</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">documentElement</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">clientWidth</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">/</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">clientHeight</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span></code></pre><pre class="shiki vp-code-light"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> layoutViewport </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> document</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">documentElement</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">clientWidth </span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;"> clientHeight</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><p>可以看到，默认的布局视口宽度为 980px。如果要显式设置布局视口，可以使用 HTML 中的 <meta> 标签：</p><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki vp-code-dark"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">meta</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">name</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;viewport&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">content</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;width=400&quot;</span><span style="color:#ABB2BF;"> /&gt;</span></span>
<span class="line"></span></code></pre><pre class="shiki vp-code-light"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">meta</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">name</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">viewport</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">content</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">width=400</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> /&gt;</span></span>
<span class="line"></span></code></pre></div><p>布局视口使视口与移动端浏览器屏幕宽度完全独立开。CSS 布局将会根据它来进行计算，并被它约束。</p><p>我们可以使用视口标签（Viewport <meta> 标签）来显式地设置布局视口。</p><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki vp-code-dark"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">meta</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#D19A66;">name</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;viewport&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#D19A66;">content</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;width=device-width,initial-scale=0,maximum-scale=1,user-scalable=no&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">/&gt;</span></span>
<span class="line"></span></code></pre><pre class="shiki vp-code-light"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">meta</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#C792EA;">name</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">viewport</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#C792EA;">content</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">width=device-width,initial-scale=0,maximum-scale=1,user-scalable=no</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">/&gt;</span></span>
<span class="line"></span></code></pre></div><p>下面是每个属性的详细说明：</p><table><thead><tr><th>属性名</th><th>取值</th><th>描述</th></tr></thead><tbody><tr><td>width</td><td>正整数或 device-width</td><td>定义视口的宽度，单位为像素</td></tr><tr><td>height</td><td>正整数或 device-height</td><td>定义视口的高度，单位为像素，一般不用</td></tr><tr><td>initial-scale</td><td>[0.0-10.0]</td><td>定义初始缩放值</td></tr><tr><td>minimum-scale</td><td>[0.0-10.0]</td><td>定义放大最大比例，它必须小于或等于 maximum-scale 设置</td></tr><tr><td>maximum-scale</td><td>[0.0-10.0]</td><td>定义缩小最小比例，它必须大于或等于 minimum-scale 设置</td></tr><tr><td>user-scalable</td><td>yes / no / 0</td><td>定义是否允许用户缩放页面，默认 yes</td></tr></tbody></table><p>有几点值得注意：</p><ul><li><code>&lt;viewport&gt;</code> 标签只对移动端浏览器有效，对 PC 端浏览器无效</li><li>当缩放比例为 100% 时，<code>DIP 的宽度 = CSS 像素宽度 = 理想视口的宽度 = 布局视口的宽度</code></li><li>单独设置 <code>initial-scale</code> 或 <code>width</code> 都会有兼容性问题，所以设置布局视口为理想视口的最佳方法是同时设置这两个属性</li><li>即使设置了 <code>user-scalable = no</code>，在 Android Chrome 浏览器中也可以强制启用手动缩放</li></ul><p>如果 <code>布局视口的宽度 = device-width</code>（设备宽度，也就是：<code>物理像素/dpr</code>）时，此时页面 100% 的宽度正好能在视觉视口中完全显示，不需要缩放查看页面了，而且在不同尺寸下都能基本表现一致，此时的布局视口的状态我们就称为 理想视口（Ideal Viewport）。</p><h3 id="视觉视口" tabindex="-1">视觉视口 <a class="header-anchor" href="#视觉视口" aria-hidden="true">#</a></h3><p>视觉视口是用户当前看到的区域，用户可以通过缩放操作视觉视口，同时不会影响布局视口。</p><p><img src="https://tsejx.github.io/css-guidebook/static/vision-viewport.8f33ec57.jpg" alt="视觉视口"></p><p>视觉视口和缩放比例的关系为：<code>当前缩放值 = 理想视口宽度 / 视觉视口宽度</code></p><p>所以，当用户放大时，视觉视口将会变小，CSS 像素将跨越更多的物理像素。</p><h3 id="理想视口" tabindex="-1">理想视口 <a class="header-anchor" href="#理想视口" aria-hidden="true">#</a></h3><p>理想视口 布局视口的默认宽度并不是一个理想的宽度，于是 Apple 和其他浏览器厂商引入了理想视口的概念，它对设备而言是最理想的布局视口尺寸。显示在理想视口中的网站具有最理想的宽度，用户无需进行缩放。</p><p>理想视口的值其实就是屏幕分辨率的值，它对应的像素叫做设备逻辑像素（Device Independent Pixel，DIP）。DIP 和设备的物理像素无关，一个 DIP 在任意像素密度的设备屏幕上都占据相同的空间。如果用户没有进行缩放，那么一个 CSS 像素就等于一个 DIP。</p><p>理想视口的宽度一般可以通过以下公式计算： 理想视口的宽度 = 设备像素 / dpr</p><p>也就是当 布局视口的宽度 等于 设备独立像素的宽度 时就是理想视口，也可以说<code>布局视口</code>等于<code>视觉视口</code>时是理想视口。</p><p>用下面的方法可以使布局视口与理想视口的宽度一致：</p><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki vp-code-dark"><code><span class="line"><span style="color:#7F848E;">&lt;!-- 这行代码告诉浏览器,布局视口的宽度应该与理想视口的宽度一致 --&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">meta</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">name</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;viewport&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">content</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;width=device-width&quot;</span><span style="color:#ABB2BF;"> /&gt;</span></span>
<span class="line"></span></code></pre><pre class="shiki vp-code-light"><code><span class="line"><span style="color:#676E95;">&lt;!-- 这行代码告诉浏览器,布局视口的宽度应该与理想视口的宽度一致 --&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">meta</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">name</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">viewport</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">content</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">width=device-width</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> /&gt;</span></span>
<span class="line"></span></code></pre></div><p>实际上，这就是响应式布局的基础。</p><h2 id="移动端适配方案" tabindex="-1">移动端适配方案 <a class="header-anchor" href="#移动端适配方案" aria-hidden="true">#</a></h2><h3 id="方案一-百分比设置" tabindex="-1">方案一：百分比设置 <a class="header-anchor" href="#方案一-百分比设置" aria-hidden="true">#</a></h3><ul><li>不同属性的百分比值，相对的可能是不同参照物，所以百分比往往很难统一；</li><li>所以百分比在移动端适配中使用是非常少的。</li></ul><h3 id="方案二-rem-单位-动态-html-的-font-size" tabindex="-1">方案二：rem 单位+动态 html 的 font-size <a class="header-anchor" href="#方案二-rem-单位-动态-html-的-font-size" aria-hidden="true">#</a></h3><h3 id="方案三-vw-单位" tabindex="-1">方案三：vw 单位 <a class="header-anchor" href="#方案三-vw-单位" aria-hidden="true">#</a></h3><h3 id="方案四-flex-弹性布局" tabindex="-1">方案四：flex 弹性布局 <a class="header-anchor" href="#方案四-flex-弹性布局" aria-hidden="true">#</a></h3>`,38);function v(s,A,g,w,_,f){const n=p,o=r("ClientOnly");return l(),i("div",null,[m,d(o,null,{default:h(()=>{var a,e;return[(((a=s.$frontmatter)==null?void 0:a.aside)??!0)&&(((e=s.$frontmatter)==null?void 0:e.showArticleMetadata)??!1)?(l(),y(n,{key:0,article:s.$frontmatter},null,8,["article"])):u("",!0)]}),_:1}),C])}const E=c(B,[["render",v]]);export{k as __pageData,E as default};
